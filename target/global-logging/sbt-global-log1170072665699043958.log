[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\enric\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\enric\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Amazon.com Inc. Java 1.8.0_282)
[debug]       Load.loadUnit: plugins took 55.9655ms
[debug]       Load.loadUnit: defsScala took 0.1811ms
[debug] [Loading] Scanning directory C:\Users\enric\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\enric\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.7746 ms
[debug]           Load.resolveProject(global-plugins) took 30.9935ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\enric\.sbt\1.0\plugins, plugins: List(<none>))) took 62.6223ms
[debug] [Loading] Done in C:\Users\enric\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 79.0964ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1437ms
[debug]     Load.loadUnit(file:/C:/Users/enric/.sbt/1.0/plugins/, ...) took 141.4242ms
[debug]   Load.apply: load took 251.8617ms
[debug]   Load.apply: resolveProjects took 3.6498ms
[debug]   Load.apply: finalTransforms took 29.8659ms
[debug]   Load.apply: config.delegates took 4.0588ms
[debug]   Load.apply: Def.make(settings)... took 1159.5327ms
[debug]   Load.apply: structureIndex took 47.9955ms
[debug]   Load.apply: mkStreams took 1.198ms
[info] loading global plugins from C:\Users\enric\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6612.9326ms
[debug]           Load.loadUnit: plugins took 14.6705ms
[debug]           Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory E:\uni\tfm\Context_broker\project
[debug]             Load.loadUnit: mkEval took 5.3701ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\uni\tfm\Context_broker\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8221 ms
[info] loading settings for project context_broker-build from idea.sbt ...
[debug]               Load.resolveProject(context_broker-build) took 1.7218ms
[debug]             Load.loadTransitive: finalizeProject(Project(id context_broker-build, base: E:\uni\tfm\Context_broker\project, plugins: List(<none>))) took 4.4359ms
[debug] [Loading] Done in E:\uni\tfm\Context_broker\project, returning: (context_broker-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1034.3668ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.2572ms
[debug]         Load.loadUnit(file:/E:/uni/tfm/Context_broker/project/, ...) took 1054.2867ms
[debug]       Load.apply: load took 1055.3634ms
[debug]       Load.apply: resolveProjects took 0.0843ms
[debug]       Load.apply: finalTransforms took 3.4276ms
[debug]       Load.apply: config.delegates took 0.2209ms
[debug]       Load.apply: Def.make(settings)... took 31.9458ms
[debug]       Load.apply: structureIndex took 11.3236ms
[debug]       Load.apply: mkStreams took 0.0035ms
[info] loading project definition from E:\uni\tfm\Context_broker\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1559.6253ms
[debug]     Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory E:\uni\tfm\Context_broker
[debug]       Load.loadUnit: mkEval took 0.1253ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\uni\tfm\Context_broker, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.0085 ms
[info] loading settings for project context_broker from build.sbt ...
[debug]         Load.resolveProject(context_broker) took 16.7481ms
[debug]       Load.loadTransitive: finalizeProject(Project(id context_broker, base: E:\uni\tfm\Context_broker, plugins: List(<none>))) took 20.9688ms
[debug] [Loading] Done in E:\uni\tfm\Context_broker, returning: (context_broker)
[debug]     Load.loadUnit: loadedProjectsRaw took 599.7887ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.0278ms
[debug]   Load.loadUnit(file:/E:/uni/tfm/Context_broker/, ...) took 2166.0525ms
[debug] Load.apply: load took 2167.0909ms
[debug] Load.apply: resolveProjects took 0.0738ms
[debug] Load.apply: finalTransforms took 12.276ms
[debug] Load.apply: config.delegates took 0.1421ms
[debug] Load.apply: Def.make(settings)... took 25.7861ms
[debug] Load.apply: structureIndex took 9.6657ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to Context_broker (in build file:/E:/uni/tfm/Context_broker/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59097 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59097, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Context_broker (in build file:/E:/uni/tfm/Context_broker/)
[debug] > Exec(idea-shell, None, None)
